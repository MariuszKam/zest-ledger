plugins {
	alias(libs.plugins.java)
	alias(libs.plugins.spotless)
	alias(libs.plugins.jacoco)
	alias(libs.plugins.pitest)
}

group = 'io.zestledger'
version = '1.0-SNAPSHOT'

java {
	toolchain { languageVersion = JavaLanguageVersion.of(libs.versions.jdk.get().toInteger()) }
}

repositories {
	mavenCentral()
}

spotless {
	format 'misc', {
		target '*.md', '.gitignore', '*.yml', '*.yaml', '*.gradle', '*.txt'
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		googleJavaFormat(libs.versions.gjf.get()).aosp()
		formatAnnotations()
		importOrder()
		removeUnusedImports()
	}
}

jacoco {
	toolVersion = libs.versions.jacoco
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

dependencies {
	testImplementation platform(libs.junit.bom)
	testImplementation libs.junit.jupiter
	testRuntimeOnly libs.junit.platform.launcher
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.85
			}
		}
	}
}

tasks.register('jacocoTest') {
	dependsOn 'test', 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

pitest {
	junit5PluginVersion = libs.versions.pitJunit
	mutators = ['STRONGER']
	timeoutConstInMillis = 4000
	timestampedReports = false
	mutationThreshold = 70
	targetClasses = ['io.zestledger.*']
	threads = 4
	outputFormats = ['HTML', 'XML']
	failWhenNoMutations = false
}
